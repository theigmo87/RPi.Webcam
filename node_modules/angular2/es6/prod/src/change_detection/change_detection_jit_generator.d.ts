import { ProtoRecord } from './proto_record';
import { CodegenNameUtil } from './codegen_name_util';
import { CodegenLogicUtil } from './codegen_logic_util';
export declare class ChangeDetectorJITGenerator {
    id: string;
    private changeDetectionStrategy;
    records: List<ProtoRecord>;
    directiveRecords: List<any>;
    private generateCheckNoChanges;
    _logic: CodegenLogicUtil;
    _names: CodegenNameUtil;
    _typeName: string;
    constructor(id: string, changeDetectionStrategy: string, records: List<ProtoRecord>, directiveRecords: List<any>, generateCheckNoChanges: boolean);
    generate(): Function;
    _maybeGenDehydrateDirectives(): string;
    _maybeGenHydrateDirectives(): string;
    _genHydrateDirectives(): string;
    _genHydrateDetectors(): string;
    _maybeGenCallOnAllChangesDone(): string;
    _genRecord(r: ProtoRecord): string;
    _genDirectiveLifecycle(r: ProtoRecord): string;
    _genPipeCheck(r: ProtoRecord): string;
    _genReferenceCheck(r: ProtoRecord): string;
    _genChangeMarker(r: ProtoRecord): string;
    _genUpdateDirectiveOrElement(r: ProtoRecord): string;
    _genThrowOnChangeCheck(oldValue: string, newValue: string): string;
    _genCheckNoChanges(): string;
    _genAddToChanges(r: ProtoRecord): string;
    _maybeFirstInBinding(r: ProtoRecord): string;
    _maybeGenLastInDirective(r: ProtoRecord): string;
    _genOnCheck(r: ProtoRecord): string;
    _genOnInit(r: ProtoRecord): string;
    _genOnChange(r: ProtoRecord): string;
    _genNotifyOnPushDetectors(r: ProtoRecord): string;
}
