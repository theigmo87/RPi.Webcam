import { ChangeDetectorRef } from './change_detector_ref';
import { DirectiveRecord } from './directive_record';
import { ChangeDetector, ChangeDispatcher } from './interfaces';
import { ProtoRecord } from './proto_record';
import { Locals } from './parser/locals';
import { Pipes } from './pipes/pipes';
export declare class AbstractChangeDetector<T> implements ChangeDetector {
    id: string;
    modeOnHydrate: string;
    lightDomChildren: List<any>;
    shadowDomChildren: List<any>;
    parent: ChangeDetector;
    ref: ChangeDetectorRef;
    alreadyChecked: any;
    context: T;
    directiveRecords: List<DirectiveRecord>;
    dispatcher: ChangeDispatcher;
    locals: Locals;
    mode: string;
    pipes: Pipes;
    firstProtoInCurrentBinding: number;
    protos: List<ProtoRecord>;
    constructor(id: string, dispatcher: ChangeDispatcher, protos: List<ProtoRecord>, directiveRecords: List<DirectiveRecord>, modeOnHydrate: string);
    addChild(cd: ChangeDetector): void;
    removeChild(cd: ChangeDetector): void;
    addShadowDomChild(cd: ChangeDetector): void;
    removeShadowDomChild(cd: ChangeDetector): void;
    remove(): void;
    detectChanges(): void;
    checkNoChanges(): void;
    runDetectChanges(throwOnChange: boolean): void;
    detectChangesInRecords(throwOnChange: boolean): void;
    detectChangesInRecordsInternal(throwOnChange: boolean): void;
    hydrate(context: T, locals: Locals, directives: any, pipes: any): void;
    hydrateDirectives(directives: any): void;
    dehydrate(): void;
    dehydrateDirectives(destroyPipes: boolean): void;
    hydrated(): boolean;
    callOnAllChangesDone(): void;
    _detectChangesInLightDomChildren(throwOnChange: boolean): void;
    _detectChangesInShadowDomChildren(throwOnChange: boolean): void;
    markAsCheckOnce(): void;
    markPathToRootAsCheckOnce(): void;
    protected notifyDispatcher(value: any): void;
    protected addChange(changes: StringMap<string, any>, oldValue: any, newValue: any): StringMap<string, any>;
    private _throwError(exception, stack);
    protected throwOnChangeError(oldValue: any, newValue: any): void;
    protected throwDehydratedError(): void;
    private _currentBinding();
    private _currentBindingProto();
}
