import { EventManager } from './events/event_manager';
import { DomProtoView } from './view/proto_view';
import { DomSharedStylesHost } from './view/shared_styles_host';
import { WtfScopeFn } from '../../profile/profile';
import { Renderer, RenderProtoViewRef, RenderViewRef, RenderElementRef, RenderFragmentRef, RenderViewWithFragments } from '../api';
import { TemplateCloner } from './template_cloner';
export declare class DomRenderer extends Renderer {
    private _eventManager;
    private _domSharedStylesHost;
    private _templateCloner;
    _document: any;
    _reflectPropertiesAsAttributes: boolean;
    constructor(_eventManager: EventManager, _domSharedStylesHost: DomSharedStylesHost, _templateCloner: TemplateCloner, document: any, reflectPropertiesAsAttributes: boolean);
    _scope_createRootHostView: WtfScopeFn;
    createRootHostView(hostProtoViewRef: RenderProtoViewRef, fragmentCount: number, hostElementSelector: string): RenderViewWithFragments;
    _scope_createView: WtfScopeFn;
    createView(protoViewRef: RenderProtoViewRef, fragmentCount: number): RenderViewWithFragments;
    destroyView(viewRef: RenderViewRef): void;
    getNativeElementSync(location: RenderElementRef): any;
    getRootNodes(fragment: RenderFragmentRef): List<Node>;
    attachFragmentAfterFragment(previousFragmentRef: RenderFragmentRef, fragmentRef: RenderFragmentRef): void;
    attachFragmentAfterElement(elementRef: RenderElementRef, fragmentRef: RenderFragmentRef): void;
    _scope_detachFragment: WtfScopeFn;
    detachFragment(fragmentRef: RenderFragmentRef): void;
    hydrateView(viewRef: RenderViewRef): void;
    dehydrateView(viewRef: RenderViewRef): void;
    setElementProperty(location: RenderElementRef, propertyName: string, propertyValue: any): void;
    setElementAttribute(location: RenderElementRef, attributeName: string, attributeValue: string): void;
    setElementClass(location: RenderElementRef, className: string, isAdd: boolean): void;
    setElementStyle(location: RenderElementRef, styleName: string, styleValue: string): void;
    invokeElementMethod(location: RenderElementRef, methodName: string, args: List<any>): void;
    setText(viewRef: RenderViewRef, textNodeIndex: number, text: string): void;
    _scope_setEventDispatcher: WtfScopeFn;
    setEventDispatcher(viewRef: RenderViewRef, dispatcher: any): void;
    _createView(protoView: DomProtoView, inplaceElement: HTMLElement): RenderViewWithFragments;
    _createEventListener(view: any, element: any, elementIndex: any, eventName: any, eventLocals: any): void;
    _createGlobalEventListener(view: any, elementIndex: any, eventName: any, eventTarget: any, fullName: any): Function;
}
