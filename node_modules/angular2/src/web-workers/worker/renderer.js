'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var api_1 = require('angular2/src/render/api');
var broker_1 = require("angular2/src/web-workers/worker/broker");
var lang_1 = require("angular2/src/facade/lang");
var di_1 = require("angular2/di");
var render_view_with_fragments_store_1 = require('angular2/src/web-workers/shared/render_view_with_fragments_store');
var api_2 = require('angular2/src/web-workers/shared/api');
var WorkerCompiler = (function () {
    function WorkerCompiler(_messageBroker) {
        this._messageBroker = _messageBroker;
    }
    /**
     * Creats a ProtoViewDto that contains a single nested component with the given componentId.
     */
    WorkerCompiler.prototype.compileHost = function (directiveMetadata) {
        var fnArgs = [new broker_1.FnArg(directiveMetadata, api_1.DirectiveMetadata)];
        var args = new broker_1.UiArguments("compiler", "compileHost", fnArgs);
        return this._messageBroker.runOnUiThread(args, api_1.ProtoViewDto);
    };
    /**
     * Compiles a single DomProtoView. Non recursive so that
     * we don't need to serialize all possible components over the wire,
     * but only the needed ones based on previous calls.
     */
    WorkerCompiler.prototype.compile = function (view) {
        var fnArgs = [new broker_1.FnArg(view, api_1.ViewDefinition)];
        var args = new broker_1.UiArguments("compiler", "compile", fnArgs);
        return this._messageBroker.runOnUiThread(args, api_1.ProtoViewDto);
    };
    /**
     * Merges ProtoViews.
     * The first entry of the array is the protoview into which all the other entries of the array
     * should be merged.
     * If the array contains other arrays, they will be merged before processing the parent array.
     * The array must contain an entry for every component and embedded ProtoView of the first entry.
     * @param protoViewRefs List of ProtoViewRefs or nested
     * @return the merge result for every input array in depth first order.
     */
    WorkerCompiler.prototype.mergeProtoViewsRecursively = function (protoViewRefs) {
        var fnArgs = [new broker_1.FnArg(protoViewRefs, api_1.RenderProtoViewRef)];
        var args = new broker_1.UiArguments("compiler", "mergeProtoViewsRecursively", fnArgs);
        return this._messageBroker.runOnUiThread(args, api_1.RenderProtoViewMergeMapping);
    };
    WorkerCompiler = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [broker_1.MessageBroker])
    ], WorkerCompiler);
    return WorkerCompiler;
})();
exports.WorkerCompiler = WorkerCompiler;
var WorkerRenderer = (function () {
    function WorkerRenderer(_messageBroker, _renderViewStore) {
        this._messageBroker = _messageBroker;
        this._renderViewStore = _renderViewStore;
    }
    /**
     * Creates a root host view that includes the given element.
     * Note that the fragmentCount needs to be passed in so that we can create a result
     * synchronously even when dealing with webworkers!
     *
     * @param {RenderProtoViewRef} hostProtoViewRef a RenderProtoViewRef of type
     * ProtoViewDto.HOST_VIEW_TYPE
     * @param {any} hostElementSelector css selector for the host element (will be queried against the
     * main document)
     * @return {RenderViewRef} the created view
     */
    WorkerRenderer.prototype.createRootHostView = function (hostProtoViewRef, fragmentCount, hostElementSelector) {
        return this._createViewHelper(hostProtoViewRef, fragmentCount, hostElementSelector);
    };
    /**
     * Creates a regular view out of the given ProtoView
     * Note that the fragmentCount needs to be passed in so that we can create a result
     * synchronously even when dealing with webworkers!
     */
    WorkerRenderer.prototype.createView = function (protoViewRef, fragmentCount) {
        return this._createViewHelper(protoViewRef, fragmentCount);
    };
    WorkerRenderer.prototype._createViewHelper = function (protoViewRef, fragmentCount, hostElementSelector) {
        var renderViewWithFragments = this._renderViewStore.allocate(fragmentCount);
        var startIndex = (renderViewWithFragments.viewRef).refNumber;
        var fnArgs = [
            new broker_1.FnArg(protoViewRef, api_1.RenderProtoViewRef),
            new broker_1.FnArg(fragmentCount, null),
        ];
        var method = "createView";
        if (lang_1.isPresent(hostElementSelector) && hostElementSelector != null) {
            fnArgs.push(new broker_1.FnArg(hostElementSelector, null));
            method = "createRootHostView";
        }
        fnArgs.push(new broker_1.FnArg(startIndex, null));
        var args = new broker_1.UiArguments("renderer", method, fnArgs);
        this._messageBroker.runOnUiThread(args, null);
        return renderViewWithFragments;
    };
    /**
     * Destroys the given view after it has been dehydrated and detached
     */
    WorkerRenderer.prototype.destroyView = function (viewRef) {
        var fnArgs = [new broker_1.FnArg(viewRef, api_1.RenderViewRef)];
        var args = new broker_1.UiArguments("renderer", "destroyView", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Attaches a fragment after another fragment.
     */
    WorkerRenderer.prototype.attachFragmentAfterFragment = function (previousFragmentRef, fragmentRef) {
        var fnArgs = [
            new broker_1.FnArg(previousFragmentRef, api_1.RenderFragmentRef),
            new broker_1.FnArg(fragmentRef, api_1.RenderFragmentRef)
        ];
        var args = new broker_1.UiArguments("renderer", "attachFragmentAfterFragment", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Attaches a fragment after an element.
     */
    WorkerRenderer.prototype.attachFragmentAfterElement = function (elementRef, fragmentRef) {
        var fnArgs = [new broker_1.FnArg(elementRef, api_2.WorkerElementRef), new broker_1.FnArg(fragmentRef, api_1.RenderFragmentRef)];
        var args = new broker_1.UiArguments("renderer", "attachFragmentAfterElement", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Detaches a fragment.
     */
    WorkerRenderer.prototype.detachFragment = function (fragmentRef) {
        var fnArgs = [new broker_1.FnArg(fragmentRef, api_1.RenderFragmentRef)];
        var args = new broker_1.UiArguments("renderer", "detachFragment", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Hydrates a view after it has been attached. Hydration/dehydration is used for reusing views
     * inside of the view pool.
     */
    WorkerRenderer.prototype.hydrateView = function (viewRef) {
        var fnArgs = [new broker_1.FnArg(viewRef, api_1.RenderViewRef)];
        var args = new broker_1.UiArguments("renderer", "hydrateView", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Dehydrates a view after it has been attached. Hydration/dehydration is used for reusing views
     * inside of the view pool.
     */
    WorkerRenderer.prototype.dehydrateView = function (viewRef) {
        var fnArgs = [new broker_1.FnArg(viewRef, api_1.RenderViewRef)];
        var args = new broker_1.UiArguments("renderer", "dehydrateView", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Returns the native element at the given location.
     * Attention: In a WebWorker scenario, this should always return null!
     */
    WorkerRenderer.prototype.getNativeElementSync = function (location) { return null; };
    /**
     * Sets a property on an element.
     */
    WorkerRenderer.prototype.setElementProperty = function (location, propertyName, propertyValue) {
        var fnArgs = [
            new broker_1.FnArg(location, api_2.WorkerElementRef),
            new broker_1.FnArg(propertyName, null),
            new broker_1.FnArg(propertyValue, null)
        ];
        var args = new broker_1.UiArguments("renderer", "setElementProperty", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Sets an attribute on an element.
     */
    WorkerRenderer.prototype.setElementAttribute = function (location, attributeName, attributeValue) {
        var fnArgs = [
            new broker_1.FnArg(location, api_2.WorkerElementRef),
            new broker_1.FnArg(attributeName, null),
            new broker_1.FnArg(attributeValue, null)
        ];
        var args = new broker_1.UiArguments("renderer", "setElementAttribute", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Sets a class on an element.
     */
    WorkerRenderer.prototype.setElementClass = function (location, className, isAdd) {
        var fnArgs = [new broker_1.FnArg(location, api_2.WorkerElementRef), new broker_1.FnArg(className, null), new broker_1.FnArg(isAdd, null)];
        var args = new broker_1.UiArguments("renderer", "setElementClass", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Sets a style on an element.
     */
    WorkerRenderer.prototype.setElementStyle = function (location, styleName, styleValue) {
        var fnArgs = [
            new broker_1.FnArg(location, api_2.WorkerElementRef),
            new broker_1.FnArg(styleName, null),
            new broker_1.FnArg(styleValue, null)
        ];
        var args = new broker_1.UiArguments("renderer", "setElementStyle", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Calls a method on an element.
     * Note: For now we're assuming that everything in the args list are primitive
     */
    WorkerRenderer.prototype.invokeElementMethod = function (location, methodName, args) {
        var fnArgs = [new broker_1.FnArg(location, api_2.WorkerElementRef), new broker_1.FnArg(methodName, null), new broker_1.FnArg(args, null)];
        var uiArgs = new broker_1.UiArguments("renderer", "invokeElementMethod", fnArgs);
        this._messageBroker.runOnUiThread(uiArgs, null);
    };
    /**
     * Sets the value of a text node.
     */
    WorkerRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
        var fnArgs = [new broker_1.FnArg(viewRef, api_1.RenderViewRef), new broker_1.FnArg(textNodeIndex, null), new broker_1.FnArg(text, null)];
        var args = new broker_1.UiArguments("renderer", "setText", fnArgs);
        this._messageBroker.runOnUiThread(args, null);
    };
    /**
     * Sets the dispatcher for all events of the given view
     */
    WorkerRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher) {
        var fnArgs = [new broker_1.FnArg(viewRef, api_1.RenderViewRef)];
        var args = new broker_1.UiArguments("renderer", "setEventDispatcher", fnArgs);
        this._messageBroker.registerEventDispatcher(viewRef, dispatcher);
        this._messageBroker.runOnUiThread(args, null);
    };
    WorkerRenderer = __decorate([
        di_1.Injectable(), 
        __metadata('design:paramtypes', [broker_1.MessageBroker, render_view_with_fragments_store_1.RenderViewWithFragmentsStore])
    ], WorkerRenderer);
    return WorkerRenderer;
})();
exports.WorkerRenderer = WorkerRenderer;
//# sourceMappingURL=renderer.js.map